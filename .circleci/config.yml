defaults: &defaults
  working_directory: ~/repo

version: 2
jobs:
  install:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dep-{{ checksum "package.json" }}

  testing:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run:
          name: Run tests
          command: npm run test

  linting:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run:
          name: Run ESLint
          command: npm run lint

  pre-build-staging:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils

      - run:
          name: Run semantic-release
          command: |
            npm i
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            npx semantic-release --branch ${CIRCLE_BRANCH} --dry-run

      - run: mkdir -p workspace

      - run: |
          cat .env > workspace/.env
          cat package.json > workspace/package.json
          cat src/manifest.json > workspace/manifest.json

      - persist_to_workspace:
          root: workspace
          paths:
            - .env
            - package.json
            - manifest.json

  build-staging:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils

      - run: cat workspace/.env >> $BASH_ENV
      - run: cat workspace/.env > .env
      - run: cat workspace/package.json > package.json
      - run: cat workspace/manifest.json > manifest.json

      - run: echo "REACT_APP_VERSION:" $REACT_APP_VERSION
      - run:
          name: Build project
          command: npm run build

      - run: mkdir -p workspace/build
      - run: cp -R colormate.sketchplugin/*  workspace/build

      - persist_to_workspace:
          root: workspace
          paths:
            - .env
            - build/

  zip-staging:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - attach_workspace:
          at: workspace
      - run: cat workspace/.env >> $BASH_ENV
      - run: apt-get update
      - run: apt-get -y install zip

      - run:
          name: Zipping project
          command: |
            echo "creating zip file:" colormate_${REACT_APP_VERSION}.zip
            zip -r colormate_${REACT_APP_VERSION}.zip workspace/build

      - run: cp colormate_${REACT_APP_VERSION}.zip workspace/colormate_${REACT_APP_VERSION}.zip

      - persist_to_workspace:
          root: workspace
          paths:
            - .

  deploy-staging:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - attach_workspace:
          at: workspace
      - run: cat workspace/.env >> $BASH_ENV

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils
      - run: pip install awscli

      - run:
          name: Deploy to S3
          command: aws s3 cp workspace/colormate_${REACT_APP_VERSION}.zip s3://colormate-testing/staging/

      - run:
          name: Notify slack channel
          command: |
            curl --header "Content-Type: application/json" --request POST --data \
            '{"text": "<'"$CIRCLE_BUILD_URL"'|#'"$CIRCLE_BUILD_NUM"'> New testing version deployed you can download it here: <'"$AWS_S3_URL_STAGING"/colormate_"$REACT_APP_VERSION".zip'|'colormate_"$REACT_APP_VERSION".zip'>"}' \
            $SLACK_WEBHOOK_URL

  release:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run:
          name: Run semantic-release
          command: |
            npm i
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            npx semantic-release

  deploy-production:
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    working_directory: ~/repo
    steps:
      - add_ssh_keys:
          fingerprints:
            - "14:80:8a:23:90:81:f4:28:16:ee:47:ef:14:ec:72:27"
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils xmlstarlet git golang-go
      - run: pip install awscli

      # - run:
      #     name: Install GO
      #     command: |
      #       wget https://dl.google.com/go/go1.12.2.linux-amd64.tar.gz
      #       tar -xvf go1.12.2.linux-amd64.tar.gz
      #       mv go /usr/local
      #       export GOROOT=/usr/local/go
      #       export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
      #       echo go version

      - run: git fetch

      - run:
          name: Setup Environment Variables
          command: |
            echo 'export GOROOT="/usr/lib/go"' >> $BASH_ENV
            echo 'export GOPATH="$HOME/repo/"' >> $BASH_ENV
            echo 'export REACT_APP_VERSION="$(git describe --abbrev=0 --tags | cut -d- -f1 | sed 's/^v//')"' >> $BASH_ENV
            echo 'export PATH="$GOPATH/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV

      - run: go get github.com/aktau/github-release

      - run: echo $REACT_APP_VERSION
      - run: echo $(git describe --abbrev=0 --tags | cut -d- -f1 | sed 's/^v//')

      - run:
          name: Prepare dist files
          command: |
            jq --arg h "$REACT_APP_VERSION" '.version=$h' package.json | sponge package.json
            jq --arg h "$REACT_APP_VERSION" '.version=$h' src/manifest.json | sponge src/manifest.json

      # - run:
      #     name: Get appcast.xml from S3
      #     command: aws s3 cp s3://colormate-testing/appcast.xml appcast.xml

      - run:
          name: Update appcast file
          command: bash ./updateAppcast.sh $REACT_APP_VERSION ${AWS_S3_URL_PRODUCTION}/colormate_${REACT_APP_VERSION}.zip

      # - run:
      #     name: Update appcast.xml in S3 with updated version
      #     command: aws s3 cp appcast.xml s3://colormate-testing/
      - run:
          name: create env file
          command: |
            touch .env
            echo REACT_APP_VERSION=$REACT_APP_VERSION >> .env

      - run:
          name: Build project
          command: npm run build

      - run:
          name: Zipping project
          command: |
            echo "creating zip file:" colormate_${REACT_APP_VERSION}.zip
            zip -r colormate_${REACT_APP_VERSION}.zip colormate.sketchplugin

      # - run:
      #     name: "Deploy colormate_${REACT_APP_VERSION}.zip to S3"
      #     command: aws s3 cp colormate_${REACT_APP_VERSION}.zip s3://colormate-testing/production/

      # - run:
      #     name: Deploy colormate.zip to S3
      #     command: aws s3 cp colormate.zip s3://colormate-testing/production/

      - run:
          name: Update Release on GitHub
          command: |
            github-release upload -R \
                --security-token $GH_TOKEN \
                --user themainingredient \
                --repo colormate \
                --tag v1.0.0 \
                --name "colormate.zip" \
                --file colormate_${REACT_APP_VERSION}.zip

      - run:
          name: Push files
          command: |
            echo """Host *
              StrictHostKeyChecking no""" >> ~/.ssh/config
            git config --global user.email "ci@circleci.com"
            git config --global user.name "Ci Server"
            git commit -am "New version released ${REACT_APP_VERSION} [ci skip]"
            git push origin HEAD
      # - run:
      #     name: Notify slack channel
      #     command: |
      #       curl --header "Content-Type: application/json" --request POST --data \
      #       '{"text": "<'"$CIRCLE_BUILD_URL"'|#'"$CIRCLE_BUILD_NUM"'> :rocket: Colormate *v'"$REACT_APP_VERSION"'* deployed :rocket: \n Download it here <'"$AWS_S3_URL_PRODUCTION"/colormate_"$REACT_APP_VERSION".zip'|'colormate_"$REACT_APP_VERSION".zip'> "}' \
      #       $SLACK_WEBHOOK_URL

workflows:
  version: 2
  deploy-staging:
    jobs:
      - install:
          filters:
            branches:
              ignore: /ci/github-hosting/
      - testing:
          filters:
            branches:
              ignore: /ci/github-hosting/
      - linting:
          filters:
            branches:
              ignore: /ci/github-hosting/
      - pre-build-staging:
          requires:
            - install
            - testing
            - linting
          filters:
            branches:
              only:
                - /release/.*/
      - build-staging:
          requires:
            - pre-build-staging
      - zip-staging:
          requires:
            - build-staging
      - deploy-staging:
          requires:
            - zip-staging

  untagged-build:
    jobs:
      - install:
          filters:
            branches:
              ignore: /ci/github-hosting/
      - testing:
          filters:
            branches:
              ignore: /ci/github-hosting/
      - linting:
          filters:
            branches:
              ignore: /ci/github-hosting/
      - release:
          requires:
            - install
            - testing
            - linting
          filters:
            branches:
              only:
                - master

  tagged-build:
    jobs:
      - deploy-production:
          filters:
            branches:
              only:
                - ci/github-hosting
