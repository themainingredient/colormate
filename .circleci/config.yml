defaults: &defaults
  working_directory: ~/repo

version: 2
jobs:
  install:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dep-{{ checksum "package.json" }}

  testing:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run:
          name: Run tests
          command: npm run test

  linting:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run:
          name: Run ESLint
          command: npm run lint

  set-staging-envs:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils

      - run:
          name: Run semantic-release
          command: |
            npm i
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            npx semantic-release --branch ${CIRCLE_BRANCH} --dry-run

      - run: mkdir -p workspace

      - run: |
          cat .env > workspace/.env
          cat package.json > workspace/package.json
          cat src/manifest.json > workspace/manifest.json

      - persist_to_workspace:
          root: workspace
          paths:
            - .env
            - package.json
            - manifest.json

  build-staging:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils

      - run: cat workspace/.env >> $BASH_ENV
      - run: cat workspace/.env > .env
      - run: cat workspace/package.json > package.json
      - run: cat workspace/manifest.json > manifest.json

      - run: echo "REACT_APP_VERSION:" $REACT_APP_VERSION
      - run:
          name: Build project
          command: npm run build

      - persist_to_workspace:
          root: workspace
          paths:
            - .env
            - colormate.sketchplugin

  zip-staging:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - attach_workspace:
          at: workspace
      - run: cat workspace/.env >> $BASH_ENV

      - run:
          name: Zipping project
          command: |
            echo "creating zip file:" colormate_${REACT_APP_VERSION}.zip
            zip -r colormate_${REACT_APP_VERSION}.zip workspace/colormate.sketchplugin

      - persist_to_workspace:
          root: workspace
          paths:
            - .env
            - colormate_${REACT_APP_VERSION}.zip

  release:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run:
          name: Run semantic-release
          command: |
            npm i
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            npx semantic-release

  deploy-staging-test:
    <<: *defaults
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    steps:
      - attach_workspace:
          at: workspace
      - run: cat workspace/.env >> $BASH_ENV

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils
      - run: pip install awscli

      - run:
          name: Deploy to S3
          command: aws s3 cp workspace/colormate_${REACT_APP_VERSION}_test.zip s3://colormate-testing/staging/

      - run:
          name: Notify slack channel
          command: |
            curl --header "Content-Type: application/json" --request POST --data \
            '{"text": "<'"$CIRCLE_BUILD_URL"'|#'"$CIRCLE_BUILD_NUM"'> New testing version deployed you can download it here: '"${AWS_S3_URL_STAGING}/colormate_${REACT_APP_VERSION}.zip"'"}' \
            $SLACK_WEBHOOK_URL

  deploy-staging:
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-

      - run: apt-get update
      - run: apt-get -y install jq zip moreutils
      - run: pip install awscli

      - run:
          name: "Run semantic-release"
          command: |
            npm i
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            npx semantic-release --branch ${CIRCLE_BRANCH} --dry-run

      - run:
          name: Setup Environment Variables
          command: |
            echo 'export PATH="$GOPATH/bin:$PATH"' >> $BASH_ENV
            echo 'export REACT_APP_VERSION="$(jq --raw-output '.version' package.json)"' >> $BASH_ENV

      - run: echo "REACT_APP_VERSION:" $REACT_APP_VERSION
      - run:
          name: Build project
          command: npm run build

      - run:
          name: Zipping project
          command: |
            echo "creating zip file:" colormate_${REACT_APP_VERSION}.zip
            zip -r colormate_${REACT_APP_VERSION}.zip colormate.sketchplugin

      - run:
          name: Deploy to S3
          command: aws s3 cp colormate_${REACT_APP_VERSION}.zip s3://colormate-testing/staging/

      - run:
          name: Notify slack channel
          command: |
            curl --header "Content-Type: application/json" --request POST --data \
            '{"text": "<'"$CIRCLE_BUILD_URL"'|#'"$CIRCLE_BUILD_NUM"'> New testing version deployed you can download it here: '"${AWS_S3_URL_STAGING}/colormate_${REACT_APP_VERSION}.zip"'"}' \
            $SLACK_WEBHOOK_URL

  deploy-production:
    docker:
      - image: nikolaik/python-nodejs:python3.7-nodejs11
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dep-{{ checksum "package.json" }}
            - v1-dep-
      - run: apt-get update
      - run: apt-get -y install jq zip moreutils xmlstarlet git
      - run: pip install awscli

      - run:
          name: Setup Environment Variables
          command: |
            echo 'export PATH="$GOPATH/bin:$PATH"' >> $BASH_ENV
            echo 'export REACT_APP_VERSION="$(git describe --abbrev=0 --tags | cut -d- -f1 | sed 's/^v//')"' >> $BASH_ENV

      - run:
        name: Prepare dist files
        command: |
          jq --arg h "$REACT_APP_VERSION" '.version=$h' package.json | sponge package.json
          jq --arg h "$REACT_APP_VERSION" '.version=$h' src/manifest.json | sponge public/manifest.json

      - run:
          name: Get appcast.xml from S3
          command: aws s3 cp s3://colormate-testing/appcast.xml appcast.xml

      - run:
          name: Update appcast file
          command: bash ./updateAppcast.sh $REACT_APP_VERSION ${AWS_S3_URL_PRODUCTION}/colormate_${REACT_APP_VERSION}.zip

      - run:
          name: Update appcast.xml in S3 with updated version
          command: aws s3 cp appcast.xml s3://colormate-testing/

      - run:
          name: Build project
          command: npm run build

      - run:
          name: Zipping project
          command: |
            echo "creating zip file:" colormate_${REACT_APP_VERSION}.zip
            zip -r colormate_${REACT_APP_VERSION}.zip colormate.sketchplugin

      - run:
          name: "Deploy colormate_${REACT_APP_VERSION}.zip to S3"
          command: aws s3 cp colormate_${REACT_APP_VERSION}.zip s3://colormate-testing/production/

      - run:
          name: Deploy colormate.zip to S3
          command: aws s3 cp colormate.zip s3://colormate-testing/production/

      - run:
          name: Notify slack channel
          command: |
            curl --header "Content-Type: application/json" --request POST --data \
            '{"text": "<'"$CIRCLE_BUILD_URL"'|#'"$CIRCLE_BUILD_NUM"'> :rocket: Colormate *v'"$REACT_APP_VERSION"'* deployed :rocket: \n Download it here <'"$AWS_S3_URL_PRODUCTION"/colormate_"$REACT_APP_VERSION".zip'|'colormate_"$REACT_APP_VERSION".zip'> "}' \
            $SLACK_WEBHOOK_URL

workflows:
  version: 2
  deploy-staging:
    jobs:
      - install
      # - testing
      # - linting
      - set-staging-envs:
          requires:
            - install
            # - testing
            # - linting
          filters:
            branches:
              only:
                # - /release/.*/
                - ci/build-on-tag
      - build-staging:
          requires:
            - set-staging-envs
      - zip-staging:
          requires:
            - build-staging
      - deploy-staging-test:
          requires:
            - zip-staging

  untagged-build:
    jobs:
      - testing
      - linting
      - release:
          requires:
            - testing
            - linting
          filters:
            branches:
              only:
                - master

  tagged-build:
    jobs:
      - deploy-production:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
